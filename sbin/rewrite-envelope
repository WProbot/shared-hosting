#!/usr/bin/python
"""
rewrite-envelope - a milter service for postfix
Copyright 2017 Clay Freeman. All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys
import os
import pwd
import grp
import signal
import Milter
import argparse

from syslog import LOG_MAIL, LOG_NOTICE, LOG_PID, openlog, syslog
from email.header import decode_header
from email.utils import parseaddr
from threading import Thread

# Define some defaults for the service
NAME = "rewrite-envelope"
BINDADDR = "localhost"
PORT = 9001
MILTERUSER = "nobody"
MILTERGROUP = "nogroup"
VERSION = "0.1"

__version__ = VERSION
__author__ = "Clay Freeman <git@clayfreeman.com>"
__copyright__ = "Copyright 2017 Clay Freeman. All rights reserved."

class RewriteEnvelopeMilter(Milter.Base):
    def __init__(self):
        self.__id = Milter.uniqueID()
        self.__local = ""
        self.__domain = ""
        self.__from = ""

    @Milter.noreply
    def envfrom(self, mailfrom):
        # Fetch the local portion of the original envelope address
        self.__local = "@".join(parseaddr(mailfrom)[1].split("@")[:-1])
        return Milter.CONTINUE

    @Milter.noreply
    def header(self, name, hval):
        # Check if this header is the 'From' e-mail header
        if name.lower() == "from":
            # Store the original e-mail in the 'From' header
            self.__from = decode_header(hval)[-1][0].split()[-1]
        return Milter.CONTINUE

    def eoh(self):
        # Attempt to extract the 'From' e-mail domain, failing on parse error
        self.__domain = parseaddr(self.__from)[1].split("@")[-1]
        return Milter.CONTINUE

    def eom(self):
        # Check that the 'From' e-mail domain is not empty before rewrite
        if self.__domain != "":
            # Rewrite the envelope address using the 'From' e-mail domain
            self.chgfrom("<" + self.__local + "@" + self.__domain + ">")
        return Milter.CONTINUE

def runner():
    Milter.factory = RewriteEnvelopeMilter
    flags = Milter.CHGHDRS
    Milter.set_flags(flags)
    Milter.runmilter(NAME, config.socket, timeout=300)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(epilog="rewrite-envelope - "
                                            "Milter for rewriting envelope "
                                            "domains of e-mail.")
    parser.add_argument("--debug", "-d",
                        default=False,
                        action="store_true",
                        help="Run in the foreground with verbose logging.")
    parser.add_argument("--group", "-g",
                        type=str,
                        default=MILTERGROUP,
                        help="Run the milter as this group "
                             "(default: %(default)s).")
    parser.add_argument("--pid", "-p",
                        type=str,
                        default=None,
                        help="Write a PID file to this path.")
    parser.add_argument("--socket", "-s",
                        type=str,
                        default="inet:{0}@{1}".format(PORT, BINDADDR),
                        help="IPv4, IPv6 or Unix socket to listen on "
                             "(default: %(default)s).")
    parser.add_argument("--user", "-u",
                        type=str,
                        default=MILTERUSER,
                        help="Run the milter as this user "
                             "(default: %(default)s).")

    config = parser.parse_args()

    # We want unbuffered stdout and stderr
    unbuf_stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    unbuf_stderr = os.fdopen(sys.stderr.fileno(), 'w', 0)
    sys.stdout = unbuf_stdout
    sys.stderr = unbuf_stderr

    # Open a connection to the system logger daemon
    openlog(NAME, LOG_PID, LOG_MAIL)

    try:
        # Attempt to load the configured user/group by name
        uid = pwd.getpwnam(config.user)[2]
        gid = grp.getgrnam(config.group)[2]
    except KeyError as e:
        print("User or group not known: {0}".format(e.message))
        sys.exit(1)

    try:
        # Needs Python >=2.7
        os.initgroups(config.user, gid)
    except:
        pass

    try:
        if config.pid:
            # Attempt to write a PID file if requested
            with open(config.pid, "w") as fd:
                fd.write(str(os.getpid()))
    except IOError as e:
        if config.debug:
            print("Cannot create PID file: (%d) %s" % (e.errno, e.strerror))

    try:
        # Attempt to change the effective GID
        os.setgid(gid)
    except OSError as e:
        print('Could not set effective group id: %s' % e)
        sys.exit(1)
    try:
        # Attempt to change the effective UID
        os.setuid(uid)
    except OSError as e:
        print('Could not set effective user id: %s' % e)
        sys.exit(1)

    if config.debug:
        print("Switched user to %s, group to %s" % (uid, gid))
        print("Staying in foreground...")
    else:
        try:
            # First fork to begin the daemonized process
            pid = os.fork()
        except OSError as e:
            print("First fork failed: (%d) %s" % (e.errno, e.strerror))
            sys.exit(1)
        if pid == 0:
            # Set a new session ID for the process
            os.setsid()
            try:
                # Second fork of the daemonized process
                pid = os.fork()
            except OSError as e:
                print("Second fork failed: (%d) %s" % (e.errno, e.strerror))
                sys.exit(1)
            if pid == 0:
                # Follow the recommended daemon guidelines of `cd /`
                os.chdir("/")
                os.umask(0)
            else:
                # noinspection PyProtectedMember
                os._exit(0)
        else:
            # noinspection PyProtectedMember
            os._exit(0)

        # In daemon mode, we redirect stdin, stdout and stderr to /dev/null
        sys.stdin = open(os.devnull, "r").fileno()
        sys.stdout = open(os.devnull, "w").fileno()
        sys.stderr = open(os.devnull, "w").fileno()

    syslog(LOG_NOTICE, "%s %s milter startup" % (NAME, VERSION))

    milter_t = Thread(target=runner)
    milter_t.daemon = True
    milter_t.start()

    # Waiting for SIGNAL to terminate process
    signal.pause()

    try:
        if config.pid and os.path.exists(config.pid):
            # Attempt to remove the PID file
            os.unlink(config.pid)
    except IOError as e:
        if config.debug:
            print("Cannot remove PID file: (%d) %s" % (e.errno, e.strerror))
        sys.exit(1)

    sys.exit(0)
